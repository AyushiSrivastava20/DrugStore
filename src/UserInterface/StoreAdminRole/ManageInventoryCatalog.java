/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.StoreAdminRole;

import Business.Drug;
import Business.Inventory;
import Business.InventoryList;
import Business.Store;
import Business.Supplier;
import Business.SupplierDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ayushi
 */
public class ManageInventoryCatalog extends javax.swing.JPanel {

    /**
     * Creates new form ManageInventoryCatalog
     */
    private JPanel userProcessContainer;
    private Store store;
    private SupplierDirectory supplierDirectory;
    private Inventory inventory;
    private boolean isCheckOut = false;

    public ManageInventoryCatalog(JPanel userProcessContainer, Store store, SupplierDirectory supplierDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.store = store;
        this.supplierDirectory = supplierDirectory;
        populateSupplierCombo();

    }

    private void populateSupplierCombo() {

        suppComboBox1.removeAllItems();
        for (Supplier supplier : supplierDirectory.getSupplierDirectory()) {
            suppComboBox1.addItem(supplier);
        }
        populateProductTable();
        if (!isCheckOut) {
            this.inventory = new Inventory();
        }
        
    }

    private void populateProductTable() {

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        Supplier supplier = (Supplier)suppComboBox1.getSelectedItem();
        model.setRowCount(0);

        if (supplier != null) {
            for (Drug d : supplier.getDrugCatalog().getDrugList()) {
                Object row[] = new Object[4];
                row[0] = d;
                row[1] = d.getDrugId();
                row[2] = d.getListPrice();
                row[3] = d.getAvail();
                model.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        backMIJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        suppComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateJTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtNewQuantity = new javax.swing.JTextField();

        jButton2.setText("jButton2");

        setBackground(new java.awt.Color(255, 255, 255));

        backMIJButton.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        backMIJButton.setForeground(new java.awt.Color(153, 0, 0));
        backMIJButton.setText("<< Back");
        backMIJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backMIJButtonActionPerformed(evt);
            }
        });

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Drug Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        suppComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Supplier");

        jLabel2.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 51));
        jLabel2.setText("Supplier Drug Catalog");

        addtoCartButton6.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        addtoCartButton6.setForeground(new java.awt.Color(153, 0, 51));
        addtoCartButton6.setText("ADD TO INVENTORY");
        addtoCartButton6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");

        jLabel6.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 51));
        jLabel6.setText("Expiration Date");

        dateJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateJTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setText("Item in Inventory");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "Expiration Date", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        btnModifyQuantity.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        btnModifyQuantity.setForeground(new java.awt.Color(153, 0, 51));
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        btnRemoveOrderItem.setForeground(new java.awt.Color(153, 0, 51));
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnCheckOut.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        btnCheckOut.setForeground(new java.awt.Color(153, 0, 51));
        btnCheckOut.setText("Check out");
        btnCheckOut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        txtNewQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewQuantityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(backMIJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suppComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(45, 45, 45)
                                .addComponent(dateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)
                                .addComponent(jLabel5)
                                .addGap(37, 37, 37)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(113, 113, 113)
                                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnModifyQuantity)
                                    .addGap(95, 95, 95)
                                    .addComponent(btnCheckOut)
                                    .addGap(67, 67, 67)
                                    .addComponent(btnRemoveOrderItem))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(329, 329, 329)
                                        .addComponent(addtoCartButton6))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))))))
                .addGap(312, 312, 312))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(suppComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(dateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(addtoCartButton6)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyQuantity)
                    .addComponent(btnCheckOut)
                    .addComponent(btnRemoveOrderItem))
                .addGap(29, 29, 29)
                .addComponent(backMIJButton)
                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void suppComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppComboBox1ActionPerformed
        // TODO add your handling code here:
        populateProductTable();

    }//GEN-LAST:event_suppComboBox1ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();
        Drug selectedDrug;
        String dateExp;

        if (selectedRow<0) {
            JOptionPane.showMessageDialog(this, "select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedDrug = (Drug) productTable.getValueAt(selectedRow, 0);
        }
        try {
            
            dateExp = dateJTextField.getText();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter valid Date", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int fetchedQuantity = (Integer) quantitySpinner.getValue();
        if (fetchedQuantity <=0) {
            JOptionPane.showMessageDialog(this, "Select atleast one quantity", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (fetchedQuantity <= selectedDrug.getAvail()) {
            boolean alreadyPresent = false;
            for (Inventory i : store.getInventoryList().getInventoryList()) {
                if (i.getDrug() == selectedDrug) {
                    int oldAvail = selectedDrug.getAvail();
                    
                    int newAvail = oldAvail - fetchedQuantity;
                    selectedDrug.setAvail(newAvail);
                    i.setQuantity(fetchedQuantity + i.getQuantity());
                    alreadyPresent = true;
                    refreshOrderTable();
                    populateProductTable();
                    break;
                }
            }

            if (!alreadyPresent) {
                int oldAvail = selectedDrug.getAvail();
                int newAvail = oldAvail - fetchedQuantity;
                selectedDrug.setAvail(newAvail);
                store.getInventoryList().addInventory(selectedDrug, dateExp, fetchedQuantity);
                refreshOrderTable();
                populateProductTable();
            } 
        } else {
                JOptionPane.showMessageDialog(this, "Quantity>Availability", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        

    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:

        int selectedRow = orderTable.getSelectedRow();

        if (selectedRow<0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!txtNewQuantity.getText().isEmpty() && !txtNewQuantity.getText().equals("0")) {
            Inventory inventory = (Inventory) orderTable.getValueAt(selectedRow, 0);
            int currentAvail = inventory.getDrug().getAvail();
            int oldQty = inventory.getQuantity();
            int newQty = Integer.parseInt(txtNewQuantity.getText());
            if (newQty > (currentAvail + oldQty)) {
                JOptionPane.showMessageDialog(this, "Quantity more than availablity", "Warning", JOptionPane.WARNING_MESSAGE);
                //return;
            } else {
                if(newQty <=0){
                    JOptionPane.showMessageDialog(this, "Invalid Qty", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                inventory.setQuantity(newQty);
                inventory.getDrug().setAvail(currentAvail + (oldQty - newQty));
                refreshOrderTable();
                populateProductTable();
            }
        } else {

            JOptionPane.showMessageDialog(this, "Quantity can not be zero", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed

        int selectedRowCount = orderTable.getSelectedRowCount();
        if (selectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Failed to retrieve selected row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Inventory i = (Inventory) orderTable.getValueAt(row, 0);
        int oldQuantity = i.getDrug().getAvail();
        int orderQuantity = i.getQuantity();
        int newQuantity = oldQuantity + orderQuantity;
        i.getDrug().setAvail(newQuantity);
        store.getInventoryList().removeInventory(i);
        JOptionPane.showMessageDialog(this, "The inventory drug of " + orderQuantity + " of " + i + " has been removed", "Information", JOptionPane.INFORMATION_MESSAGE);
        refreshOrderTable();
        populateProductTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if (store.getInventoryList().getInventoryList().size() > 0) {

            
            isCheckOut = true;
            JOptionPane.showMessageDialog(null, "Inventory added successfully");
            inventory = new Inventory();
            refreshOrderTable();
            populateProductTable();
        } else {
            JOptionPane.showMessageDialog(null, "Inventory not added as there are no drugs");
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void dateJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateJTextFieldActionPerformed

    private void txtNewQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewQuantityActionPerformed

    private void backMIJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backMIJButtonActionPerformed
        // TODO add your handling code here:
        if (store.getInventoryList().getInventoryList().size() > 0) {
            //Inventory i;
             for (Inventory i : store.getInventoryList().getInventoryList()) {
                Drug d=i.getDrug();
                d.setAvail(d.getAvail());
            }
            //store.getInventoryList().removeInventory(i);
        }
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backMIJButtonActionPerformed

    public void refreshOrderTable() {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        model.setRowCount(0);
        for (Inventory i : store.getInventoryList().getInventoryList()) {
            Object row[] = new Object[3];
            row[0] = i;
            row[1] = i.getExpiryDate();
            row[2] = i.getQuantity();
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton backMIJButton;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JTextField dateJTextField;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox suppComboBox1;
    private javax.swing.JTextField txtNewQuantity;
    // End of variables declaration//GEN-END:variables
}
